To enable live reload follow these steps

1) Add to pom.xml file the code below
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
    <scope>runtime</scope>
    <optional>true</optional>
</dependency>

2) In intelij under compiler enable build project automatically

3) In intelij under advanced settings enable Allow auto-make to start even if app is running

4) Optional install LiveReload to refresh browser automatically.






const subjects = {
    "Art": ["Ceramics", "Drawing and painting"],
    "Math": ["Integrated 1", "Integrated 2", "Integrated 3", "AP Calculus AB", "AP Calculus BC", "AP Statistics"],
    "Foreign Language": ["Spanish 1", "Spanish 2", "Spanish 3", "Spanish 4", "AP Spanish", "Chinese 1", "Chinese 2", "Chinese 3", "Chinese 4", "AP Chinese"]
};

const keys = Object.keys(subjects);


// Required Classes

const requiredUl = document.getElementById("requiredClassesUl");

for (let key of keys) {
    let li = document.createElement("li");
    // li.innerText = key;
    let button = document.createElement("button")
    button.setAttribute("type", "button")
    // dont work
    // button.onclick= "setDropdownTitle(this.value, 'dropdownMenuButton1')"
    button.id = key + "button"
    button.addEventListener("click", setDropdownTitle)
    //
    button.value = key
    button.innerText = key

    li.appendChild(button)

    requiredUl.appendChild(li);

}


// Wanted Classes

//Subject
const wantedSubjectsUl = document.getElementById("wantedSubjectsUl");

for (let key of keys) {
    li = document.createElement("li");
    // li.innerText = key;

    button = document.createElement("button")
    button.setAttribute("type", "button")
    // dont work
    // button.onclick= "setDropdownTitle(this.value, 'dropdownMenuButton1')"
    button.id = key + "button2"
    button.addEventListener("click", setDropdownTitle)
    //
    button.value = key
    button.innerText = key

    li.appendChild(button)

    wantedSubjectsUl.appendChild(li);
}



// slider functinality
function rangeSlider(value, id) {
    document.getElementById(id).innerHTML = value;
}

function wantedSubjectFunc(){
    setDropdownTitle();

}

function createCourseList(){
    //Class
    const wantedClassesUl = document.getElementById("wantedClassesUl");

    for (let course of keys[wantedSubjectsUl.innerText]) {
        li = document.createElement("li");
        // li.innerText = key;

        button = document.createElement("button")
        button.setAttribute("type", "button")
        // dont work
        // button.onclick= "setDropdownTitle(this.value, 'dropdownMenuButton1')"
        button.id = key + "button3"
        button.addEventListener("click", setDropdownTitle)
        //
        button.value = key
        button.innerText = course

        li.appendChild(button)

        wantedClassesUl.appendChild(li);
}
}

// changes dropDownTitles after making a selection
function setDropdownTitle() {
    const dB = this.parentElement.parentElement.previousElementSibling
    dB.innerText = this.value;
}








<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <link rel="stylesheet" th:href="@{/css/home.css}">
  <title>OnlineCouncilor</title>
</head>

<body>

  <h1>
    Welcome to the Online Councilor
  </h1>

  <!-- <h2 th:text="${my_var}"></h2> -->

  <form action="/" method="POST" class="container">
    <!-- 1) Enter your first name -->
    <label for="first_name">First Name</label>
    <input type="text" name="first_name" id="first_name">
    <br>
    <br>
    <!-- 2) Enter your grade -->
    <label for="grade">Grade</label>
    <input type="text" name="grade" id="grade">
    <br>
    <br>
    <hr>
    <!-- 2) Enter your term length-->

    <div>
      <label for="term_length">Term Length</label>
      <span id="inputValueTermLength"></span>
      <input type="range" name="term_length" min="2" max="4" value="2" id="term_length"
        onChange="rangeSlider(this.value, 'inputValueTermLength')" onmousemove="rangeSlider(this.value, 'inputValueTermLength')">
      <br>
      <br>
    </div>



    <!-- Required Classes -->
    <div class="required">

      <!-- Button trigger modal -->
      <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#requiredClasses">
        Choose required classes
      </button>
      <!-- Modal for required classes -->
      <div class="modal fade" id="requiredClasses" tabindex="-1" aria-labelledby="requiredClassesLabel"
        aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="requiredClassesLabel">Required Classes</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <!-- dropdown 1 -->
              <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1"
                  data-bs-toggle="dropdown" aria-expanded="false">
                  Required Class
                </button>
                <ul id="requiredClassesUl" class="dropdown-menu" aria-labelledby="dropdownMenuButton1">

<!--
                  <li th:each="subject: ${subjects.keySet()}">
                    <button type="button" class="dropdown-item" href="#"
                      onclick="setDropdownTitle(this.value, 'dropdownMenuButton1')" th:value="${subject}"
                      th:text="${subject}">
                    </button>
                  </li> -->

                </ul>
              </div>

              <label for="length">Length</label>
              <input type="text" name="length" id="length">

            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="button" class="btn btn-primary">Save changes</button>
            </div>
          </div>
        </div>
      </div>
    </div>





      <!-- model for wanted classes -->

      <div class="wanted">
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#wantedClasses">
          Choose wanted classes
        </button>

        <div class="modal fade" id="wantedClasses" tabindex="-1" aria-labelledby="wantedClassesLabel" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="wantedClassesLabel">Wanted classes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <!-- dropdown subject -->
                <div class="dropdown">
                  <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuSubject"
                    data-bs-toggle="dropdown" aria-expanded="false">
                    Subject
                  </button>
                  <ul id="wantedSubjectsUl" class="dropdown-menu" aria-labelledby="dropdownMenuSubject">


<!--
                    <li th:each="subject: ${subjects.keySet()}"><button type="button" class="dropdown-item" href="#"
                        onclick="setDropdownTitle(this.value,'dropdownMenuSubject')" th:value="${subject}"
                        th:text="${subject}"></button></li>
   -->


                  </ul>
                </div>
                <!-- dropdown class -->
                <div class="dropdown">
                  <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuClass"
                    data-bs-toggle="dropdown" aria-expanded="false">
                    Class
                  </button>
                  <ul id="wantedClassesUl" class="dropdown-menu" aria-labelledby="dropdownMenuClass">

<!--
                    <li th:each="subject: ${subjects.get('Math')}"><button type="button" class="dropdown-item" href="#"
                        onclick="setDropdownTitle(this.value,'dropdownMenuClass')" th:value="${subject}"
                        th:text="${subject}"></button></li>
   -->
                  </ul>
                </div>

                <label for="length">Length</label>
                <input type="text" name="length" id="length">

              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Save changes</button>
              </div>
            </div>
          </div>
        </div>
      </div>

    <!-- 3) Enter Math Rating with slider -->
    <div>
      <label for="math_skills">Math Skills</label>
      <span id="inputValueMath"></span>
      <input type="range" name="math_skills" min="1" max="10" value="5" id="math_skills"
        onChange="rangeSlider(this.value, 'inputValueMath' )" onmousemove="rangeSlider(this.value,'inputValueMath')">
      <br>
      <br>

      <!-- Submit Info Button -->
      <input type="submit" name="submit" id="submit" value="submit">
    </div>



  </form>

  <script th:src="@{/js/home.js}"></script>



  <!-- Option 1: Bootstrap Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
    crossorigin="anonymous"></script>


</body>

</html>
